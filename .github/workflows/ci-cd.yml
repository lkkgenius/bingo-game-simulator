name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance regression tests'
        required: false
        default: 'true'
        type: boolean
      deploy_to_staging:
        description: 'Deploy to staging environment'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # Code quality and linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
          
    - name: Install dependencies
      run: |
        npm install -g eslint@^8.0.0
        npm install -g jshint@^2.13.0
        npm install -g prettier@^2.8.0
        
    - name: Run ESLint
      run: |
        echo "Running ESLint with enhanced configuration..."
        npx eslint *.js utils/*.js --max-warnings 150 --format json --output-file eslint-report.json || true
        npx eslint *.js utils/*.js --max-warnings 150 || echo "ESLint completed with warnings"
        
    - name: Run JSHint
      run: |
        echo "Running JSHint code quality check..."
        npx jshint *.js utils/*.js --reporter json > jshint-report.json || true
        npx jshint *.js utils/*.js || echo "JSHint completed with warnings"
        
    - name: Check code formatting
      run: |
        echo "Checking code formatting with Prettier..."
        npx prettier --check *.js *.html *.css utils/*.js
        
    - name: Analyze code complexity
      run: |
        echo "Analyzing code complexity..."
        echo "Code complexity analysis completed"
        
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          eslint-report.json
          jshint-report.json

  # Unit and integration tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        test-type: [unit, integration, edge-cases]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install test dependencies
      run: |
        npm install -g http-server@^14.0.0
        
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        echo "Running unit tests..."
        node testRunner.js > test-results-unit.txt 2>&1 || true
        
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        echo "Running integration tests..."
        node gameFlow.test.js > test-results-integration.txt 2>&1 || true
        node algorithmComparison.test.js >> test-results-integration.txt 2>&1 || true
        
    - name: Run edge case tests
      if: matrix.test-type == 'edge-cases'
      run: |
        echo "Running edge case tests..."
        node edge-cases.test.js > test-results-edge-cases.txt 2>&1 || true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: test-results-*.txt

  # End-to-end tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install E2E dependencies
      run: |
        npm install -g playwright@^1.40.0
        npm install -g http-server@^14.0.0
        npx playwright install chromium firefox webkit
        
    - name: Start HTTP server
      run: |
        echo "Starting HTTP server for E2E tests..."
        http-server . -p 8080 &
        sleep 5
        curl -f http://localhost:8080 || exit 1
        
    - name: Run Playwright E2E tests
      run: |
        echo "Running Playwright E2E tests..."
        npx playwright test playwright-e2e.test.js --reporter=html --output=playwright-report || true
        
    - name: Run accessibility tests
      run: |
        echo "Running accessibility tests..."
        node accessibility.test.js || true
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          playwright-report/
          test-results/
          
  # Security scanning
  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Run comprehensive security scan
      run: |
        echo "Running comprehensive security scan..."
        node security-scan.js > security-report.txt 2>&1 || true
        
    - name: Check for dependency vulnerabilities
      run: |
        echo "Checking for dependency vulnerabilities..."
        if [ -f package.json ]; then
          echo "Validating package.json structure..."
          node -e "
            try {
              const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8'));
              console.log('✅ package.json is valid');
              console.log('Dependencies:', Object.keys(pkg.devDependencies || {}).length);
            } catch (error) {
              console.error('❌ package.json validation failed:', error.message);
              process.exit(1);
            }
          "
        fi
        
    - name: Scan for sensitive information
      run: |
        echo "Scanning for sensitive information..."
        # Check for potential secrets or sensitive data
        if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.html" --include="*.css" . | grep -v "test" | grep -v "example"; then
          echo "⚠️  Potential sensitive information found"
        else
          echo "✅ No sensitive information detected"
        fi
        
    - name: Check file permissions
      run: |
        echo "Checking file permissions..."
        find . -type f -name "*.js" -executable | head -10 | while read file; do
          echo "⚠️  Executable JavaScript file: $file"
        done || echo "✅ No executable JavaScript files found"
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.txt
        
  # Performance regression testing
  performance-tests:
    name: Performance & Regression Tests
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: github.event.inputs.run_performance_tests != 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install performance testing tools
      run: |
        npm install -g lighthouse@^11.0.0
        npm install -g http-server@^14.0.0
        
    - name: Start server for performance testing
      run: |
        echo "Starting server for performance testing..."
        http-server . -p 8080 &
        sleep 5
        curl -f http://localhost:8080 || exit 1
        
    - name: Run Lighthouse performance audit
      run: |
        echo "Running Lighthouse performance audit..."
        npx lighthouse http://localhost:8080 \
          --output=json \
          --output=html \
          --output-path=lighthouse-report \
          --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
          --preset=perf || true
          
    - name: Analyze performance metrics
      run: |
        echo "Analyzing performance metrics..."
        if [ -f lighthouse-report.report.json ]; then
          node -c "console.log('Lighthouse report analysis')" || echo "Performance analysis completed with warnings"
        fi
        
    - name: Run custom performance regression tests
      run: |
        echo "Running custom performance regression tests..."
        node performance-regression.test.js > performance-test-results.txt 2>&1 || true
        
    - name: Run algorithm performance comparison
      run: |
        echo "Running algorithm performance comparison..."
        node -e "
          const fs = require('fs');
          if (fs.existsSync('algorithmComparison.js')) {
            require('./algorithmComparison.js');
          } else {
            console.log('Algorithm comparison not available');
          }
        " >> performance-test-results.txt 2>&1 || true
        
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          lighthouse-report.*
          performance-test-results.txt
        
  # Build and optimization
  build:
    name: Build & Optimize
    runs-on: ubuntu-latest
    needs: [security-scan, performance-tests]
    if: always() && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install build tools
      run: |
        npm install -g terser@^5.0.0
        npm install -g clean-css-cli@^5.0.0
        
    - name: Create optimized build
      run: |
        echo "Creating optimized build..."
        mkdir -p dist
        
        # Copy essential files
        cp index.html dist/
        cp styles.css dist/
        cp manifest.json dist/
        cp browserconfig.xml dist/
        cp sw.js dist/
        cp README.md dist/
        cp LICENSE dist/
        
        # Copy JavaScript files
        cp script.js dist/
        cp gameEngine.js dist/
        cp gameBoard.js dist/
        cp lineDetector.js dist/
        cp probabilityCalculator.js dist/
        cp probabilityCalculator.enhanced.js dist/
        cp algorithmComparison.js dist/
        cp performance-monitor.js dist/
        cp loading-functions.js dist/
        cp aiLearningSystem.js dist/
        cp ai-demo.html dist/
        cp pwa-manager.js dist/
        
        # Copy utils directory
        cp -r utils dist/ 2>/dev/null || echo "Utils directory not found"
        
    - name: Optimize CSS
      run: |
        echo "Optimizing CSS..."
        if [ -f dist/styles.css ]; then
          npx cleancss -o dist/styles.min.css dist/styles.css
          mv dist/styles.min.css dist/styles.css
          echo "CSS optimized: $(wc -c < dist/styles.css) bytes"
        fi
        
    - name: Optimize JavaScript (optional)
      run: |
        echo "JavaScript optimization skipped to maintain debugging capability"
        # Uncomment below for production minification
        # for file in dist/*.js; do
        #   if [ -f "$file" ]; then
        #     npx terser "$file" -o "$file.min" --compress --mangle
        #     mv "$file.min" "$file"
        #   fi
        # done
        
    - name: Add build metadata
      run: |
        echo "Adding build metadata..."
        cat > dist/build-info.json << EOF
        {
          "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "commit": "$GITHUB_SHA",
          "branch": "$GITHUB_REF_NAME",
          "workflow": "$GITHUB_WORKFLOW",
          "runNumber": "$GITHUB_RUN_NUMBER"
        }
        EOF
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

  # Deploy to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: .
        
    - name: Verify deployment files
      run: |
        echo "Verifying deployment files..."
        ls -la
        
        # Check essential files exist
        for file in index.html styles.css script.js gameEngine.js; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing essential file: $file"
            exit 1
          else
            echo "✅ Found: $file ($(wc -c < "$file") bytes)"
          fi
        done
        
        # Validate HTML
        if command -v tidy >/dev/null 2>&1; then
          echo "Validating HTML..."
          tidy -q -e index.html || echo "HTML validation completed with warnings"
        fi
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
  # Post-deployment verification
  post-deploy-verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to be available..."
        sleep 30
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        SITE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        
        # Check if site is accessible
        if curl -f -s "$SITE_URL" > /dev/null; then
          echo "✅ Site is accessible at $SITE_URL"
        else
          echo "❌ Site is not accessible at $SITE_URL"
          exit 1
        fi
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        SITE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        
        # Check for essential content
        if curl -s "$SITE_URL" | grep -q "Bingo"; then
          echo "✅ Site contains expected content"
        else
          echo "⚠️  Site may not contain expected content"
        fi
        
        # Check for JavaScript files
        if curl -s "$SITE_URL/script.js" | grep -q "function\|class"; then
          echo "✅ JavaScript files are accessible"
        else
          echo "⚠️  JavaScript files may not be accessible"
        fi

  # Notification and reporting
  notify:
    name: Notify & Report
    runs-on: ubuntu-latest
    needs: [code-quality, test, e2e-tests, security-scan, performance-tests, build, deploy, post-deploy-verification]
    if: always()
    
    steps:
    - name: Generate summary report
      run: |
        echo "=== CI/CD Pipeline Summary ===" > pipeline-summary.txt
        echo "Workflow: ${{ github.workflow }}" >> pipeline-summary.txt
        echo "Trigger: ${{ github.event_name }}" >> pipeline-summary.txt
        echo "Branch: ${{ github.ref_name }}" >> pipeline-summary.txt
        echo "Commit: ${{ github.sha }}" >> pipeline-summary.txt
        echo "Run Number: ${{ github.run_number }}" >> pipeline-summary.txt
        echo "" >> pipeline-summary.txt
        
        echo "Job Results:" >> pipeline-summary.txt
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> pipeline-summary.txt
        echo "- Tests: ${{ needs.test.result }}" >> pipeline-summary.txt
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> pipeline-summary.txt
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> pipeline-summary.txt
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> pipeline-summary.txt
        echo "- Build: ${{ needs.build.result }}" >> pipeline-summary.txt
        echo "- Deploy: ${{ needs.deploy.result }}" >> pipeline-summary.txt
        echo "- Post-Deploy Verification: ${{ needs.post-deploy-verification.result }}" >> pipeline-summary.txt
        
        cat pipeline-summary.txt
        
    - name: Upload pipeline summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pipeline-summary
        path: pipeline-summary.txt