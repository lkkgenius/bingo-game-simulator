{
  "name": "bingo-game-simulator",
  "version": "1.0.0",
  "description": "A cooperative Bingo game simulator with intelligent move suggestions",
  "main": "index.html",
  "scripts": {
    "start": "http-server . -p 8080",
    "dev": "http-server . -p 8080 --cors",
    "test": "node testRunner.js",
    "test:unit": "node testRunner.js",
    "test:integration": "node gameFlow.test.js && node algorithmComparison.test.js",
    "test:edge-cases": "node edge-cases.test.js",
    "test:utils": "node utils/common.test.js",
    "test:e2e": "npx playwright test playwright-e2e.test.js",
    "test:e2e:headed": "npx playwright test playwright-e2e.test.js --headed",
    "test:accessibility": "node accessibility.test.js",
    "test:performance": "node performance-regression.test.js",
    "test:security": "node security-scan.js",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:edge-cases && npm run test:utils && npm run test:e2e && npm run test:performance && npm run test:security",
    "test:ci": "npm run test:unit && npm run test:integration && npm run test:edge-cases && npm run test:utils",
    "lint": "eslint *.js utils/*.js --fix",
    "lint:check": "eslint *.js utils/*.js --max-warnings 5",
    "lint:security": "eslint *.js utils/*.js --config .eslintrc.security.js",
    "format": "prettier --write *.js *.html *.css utils/*.js",
    "format:check": "prettier --check *.js *.html *.css utils/*.js",
    "quality": "jshint *.js utils/*.js",
    "quality:report": "jshint *.js utils/*.js --reporter=json > jshint-report.json",
    "complexity": "node -e \"const fs=require('fs');['script.js','gameEngine.js','gameBoard.js','lineDetector.js','probabilityCalculator.js'].forEach(f=>{if(fs.existsSync(f)){const c=fs.readFileSync(f,'utf8');const l=c.split('\\n').length;const fn=(c.match(/function\\s+\\w+|=>\\s*{|\\w+\\s*:\\s*function/g)||[]).length;console.log(f+': '+l+' lines, '+fn+' functions');if(l>2000)console.log('⚠️  '+f+' is large ('+l+' lines)');}});\"",
    "build": "npm run lint:check && npm run test:ci",
    "build:production": "npm run build && npm run optimize",
    "build:dist": "mkdir -p dist && cp index.html styles.css manifest.json browserconfig.xml sw.js README.md LICENSE *.js dist/ && cp -r utils dist/ 2>/dev/null || true",
    "optimize": "npm run build:dist && npm run minify:css",
    "minify:css": "if [ -f dist/styles.css ]; then npx cleancss -o dist/styles.min.css dist/styles.css && mv dist/styles.min.css dist/styles.css; fi",
    "minify:js": "for file in dist/*.js; do if [ -f \"$file\" ]; then npx terser \"$file\" -o \"$file.min\" --compress --mangle && mv \"$file.min\" \"$file\"; fi; done",
    "deploy": "npm run build:production && echo 'Ready for deployment'",
    "deploy:github": "npm run deploy && echo 'Deploying to GitHub Pages...'",
    "audit": "npm run test:security",
    "audit:full": "npm run test:security && npm run lint:security && npm run quality",
    "ci": "npm run lint:check && npm run test:all && npm run audit",
    "ci:fast": "npm run lint:check && npm run test:ci && npm run test:security",
    "lighthouse": "lighthouse http://localhost:8080 --output=html --output-path=lighthouse-report.html --chrome-flags=\"--headless --no-sandbox\"",
    "lighthouse:mobile": "lighthouse http://localhost:8080 --preset=perf --form-factor=mobile --output=html --output-path=lighthouse-mobile.html --chrome-flags=\"--headless --no-sandbox\"",
    "lighthouse:ci": "lighthouse http://localhost:8080 --output=json --output-path=lighthouse-report.json --chrome-flags=\"--headless --no-sandbox\"",
    "performance": "npm run lighthouse && npm run test:performance",
    "validate": "npm run format:check && npm run lint:check && npm run quality",
    "precommit": "npm run validate && npm run test:ci",
    "prepush": "npm run ci:fast",
    "clean": "rm -f *.log *.report.* lighthouse-*.html lighthouse-*.json && rm -rf dist/",
    "clean:cache": "rm -rf node_modules/.cache && npm cache clean --force",
    "docs": "echo 'Generating documentation...' && node -e \"console.log('Documentation would be generated here')\"",
    "docs:api": "echo 'API documentation generation not implemented'",
    "analyze": "npm run complexity && npm run quality:report && echo 'Analysis complete'",
    "analyze:bundle": "echo 'Bundle analysis not applicable for vanilla JS project'",
    "health-check": "node -e \"console.log('Health check: All core files present'); ['index.html','script.js','gameEngine.js'].forEach(f=>{if(!require('fs').existsSync(f))throw new Error('Missing: '+f);});console.log('✅ Health check passed');\"",
    "version:patch": "npm version patch",
    "version:minor": "npm version minor",
    "version:major": "npm version major"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/username/bingo-game-simulator.git"
  },
  "keywords": [
    "bingo",
    "game",
    "simulator",
    "javascript",
    "html5",
    "css3",
    "probability",
    "algorithm"
  ],
  "author": "Your Name",
  "license": "MIT",
  "devDependencies": {
    "eslint": "^8.0.0",
    "jshint": "^2.13.0",
    "playwright": "^1.40.0",
    "http-server": "^14.0.0",
    "lighthouse": "^11.0.0"
  },
  "engines": {
    "node": ">=14.0.0"
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}